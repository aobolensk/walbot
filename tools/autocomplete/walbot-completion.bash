# AUTOMATCALLY GENERATED by `shtab`

_shtab_walbot_py_subparsers=('autocomplete' 'autoupdate' 'docs' 'help' 'mexplorer' 'patch' 'restart' 'start' 'startmini' 'stop' 'stopmini' 'suspend' 'test')

_shtab_walbot_py_option_strings=('-h' '--help')
_shtab_walbot_py_autocomplete_option_strings=('-h' '--help' '--name')
_shtab_walbot_py_autoupdate_option_strings=('-h' '--help' '--name')
_shtab_walbot_py_docs_option_strings=('-h' '--help' '--name' '-o' '--out_file')
_shtab_walbot_py_help_option_strings=('-h' '--help' '--name')
_shtab_walbot_py_mexplorer_option_strings=('-h' '--help' '--name')
_shtab_walbot_py_patch_option_strings=('-h' '--help' '--name')
_shtab_walbot_py_restart_option_strings=('-h' '--help' '--name' '--fast_start' '--patch' '--nohup')
_shtab_walbot_py_start_option_strings=('-h' '--help' '--name' '--autoupdate' '--fast_start' '--patch' '--nohup')
_shtab_walbot_py_startmini_option_strings=('-h' '--help' '--name' '--fast_start' '--patch' '--nohup' '-m' '--message')
_shtab_walbot_py_stop_option_strings=('-h' '--help' '--name')
_shtab_walbot_py_stopmini_option_strings=('-h' '--help' '--name' '--fast_start' '--patch' '--nohup')
_shtab_walbot_py_suspend_option_strings=('-h' '--help' '--name' '--fast_start' '--patch' '--nohup' '-m' '--message')
_shtab_walbot_py_test_option_strings=('-h' '--help' '--name' '-v' '--verbose' '-vv' '--verbose2')



_shtab_walbot_py_pos_0_choices='autocomplete autoupdate docs help mexplorer patch restart start startmini stop stopmini suspend test'
_shtab_walbot_py_autocomplete_pos_0_choices='bash'
_shtab_walbot_py_patch_pos_0_choices='all config.yaml markov.yaml secret.yaml'

_shtab_walbot_py_pos_0_nargs=A...
_shtab_walbot_py__h_nargs=0
_shtab_walbot_py___help_nargs=0
_shtab_walbot_py_autocomplete_pos_0_nargs=1
_shtab_walbot_py_autocomplete__h_nargs=0
_shtab_walbot_py_autocomplete___help_nargs=0
_shtab_walbot_py_autoupdate__h_nargs=0
_shtab_walbot_py_autoupdate___help_nargs=0
_shtab_walbot_py_docs__h_nargs=0
_shtab_walbot_py_docs___help_nargs=0
_shtab_walbot_py_help__h_nargs=0
_shtab_walbot_py_help___help_nargs=0
_shtab_walbot_py_mexplorer__h_nargs=0
_shtab_walbot_py_mexplorer___help_nargs=0
_shtab_walbot_py_patch__h_nargs=0
_shtab_walbot_py_patch___help_nargs=0
_shtab_walbot_py_restart__h_nargs=0
_shtab_walbot_py_restart___help_nargs=0
_shtab_walbot_py_restart___fast_start_nargs=0
_shtab_walbot_py_restart___patch_nargs=0
_shtab_walbot_py_restart___nohup_nargs=0
_shtab_walbot_py_start__h_nargs=0
_shtab_walbot_py_start___help_nargs=0
_shtab_walbot_py_start___autoupdate_nargs=0
_shtab_walbot_py_start___fast_start_nargs=0
_shtab_walbot_py_start___patch_nargs=0
_shtab_walbot_py_start___nohup_nargs=0
_shtab_walbot_py_startmini__h_nargs=0
_shtab_walbot_py_startmini___help_nargs=0
_shtab_walbot_py_startmini___fast_start_nargs=0
_shtab_walbot_py_startmini___patch_nargs=0
_shtab_walbot_py_startmini___nohup_nargs=0
_shtab_walbot_py_stop__h_nargs=0
_shtab_walbot_py_stop___help_nargs=0
_shtab_walbot_py_stopmini__h_nargs=0
_shtab_walbot_py_stopmini___help_nargs=0
_shtab_walbot_py_stopmini___fast_start_nargs=0
_shtab_walbot_py_stopmini___patch_nargs=0
_shtab_walbot_py_stopmini___nohup_nargs=0
_shtab_walbot_py_suspend__h_nargs=0
_shtab_walbot_py_suspend___help_nargs=0
_shtab_walbot_py_suspend___fast_start_nargs=0
_shtab_walbot_py_suspend___patch_nargs=0
_shtab_walbot_py_suspend___nohup_nargs=0
_shtab_walbot_py_test__h_nargs=0
_shtab_walbot_py_test___help_nargs=0
_shtab_walbot_py_test__v_nargs=0
_shtab_walbot_py_test___verbose_nargs=0
_shtab_walbot_py_test__vv_nargs=0
_shtab_walbot_py_test___verbose2_nargs=0


# $1=COMP_WORDS[1]
_shtab_compgen_files() {
  compgen -f -- $1  # files
}

# $1=COMP_WORDS[1]
_shtab_compgen_dirs() {
  compgen -d -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_replace_nonword() {
  echo "${1//[^[:word:]]/_}"
}

# set default values (called for the initial parser & any subparsers)
_set_parser_defaults() {
  local subparsers_var="${prefix}_subparsers[@]"
  sub_parsers=${!subparsers_var}

  local current_option_strings_var="${prefix}_option_strings[@]"
  current_option_strings=${!current_option_strings_var}

  completed_positional_actions=0

  _set_new_action "pos_${completed_positional_actions}" true
}

# $1=action identifier
# $2=positional action (bool)
# set all identifiers for an action's parameters
_set_new_action() {
  current_action="${prefix}_$(_shtab_replace_nonword $1)"

  local current_action_compgen_var=${current_action}_COMPGEN
  current_action_compgen="${!current_action_compgen_var}"

  local current_action_choices_var="${current_action}_choices"
  current_action_choices="${!current_action_choices_var}"

  local current_action_nargs_var="${current_action}_nargs"
  if [ -n "${!current_action_nargs_var}" ]; then
    current_action_nargs="${!current_action_nargs_var}"
  else
    current_action_nargs=1
  fi

  current_action_args_start_index=$(( $word_index + 1 ))

  current_action_is_positional=$2
}

# Notes:
# `COMPREPLY`: what will be rendered after completion is triggered
# `completing_word`: currently typed word to generate completions for
# `${!var}`: evaluates the content of `var` and expand its content as a variable
#     hello="world"
#     x="hello"
#     ${!x} -> ${hello} -> "world"
_shtab_walbot_py() {
  local completing_word="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=()

  prefix=_shtab_walbot_py
  word_index=0
  _set_parser_defaults
  word_index=1

  # determine what arguments are appropriate for the current state
  # of the arg parser
  while [ $word_index -ne $COMP_CWORD ]; do
    local this_word="${COMP_WORDS[$word_index]}"

    if [[ -n $sub_parsers && " ${sub_parsers[@]} " =~ " ${this_word} " ]]; then
      # valid subcommand: add it to the prefix & reset the current action
      prefix="${prefix}_$(_shtab_replace_nonword $this_word)"
      _set_parser_defaults
    fi

    if [[ " ${current_option_strings[@]} " =~ " ${this_word} " ]]; then
      # a new action should be acquired (due to recognised option string or
      # no more input expected from current action);
      # the next positional action can fill in here
      _set_new_action $this_word false
    fi

    if [[ "$current_action_nargs" != "*" ]] && \
       [[ "$current_action_nargs" != "+" ]] && \
       [[ "$current_action_nargs" != *"..." ]] && \
       (( $word_index + 1 - $current_action_args_start_index >= \
          $current_action_nargs )); then
      $current_action_is_positional && let "completed_positional_actions += 1"
      _set_new_action "pos_${completed_positional_actions}" true
    fi

    let "word_index+=1"
  done

  # Generate the completions

  if [[ "${completing_word}" == -* ]]; then
    # optional argument started: use option strings
    COMPREPLY=( $(compgen -W "${current_option_strings[*]}" -- "${completing_word}") )
  else
    # use choices & compgen
    COMPREPLY=( $(compgen -W "${current_action_choices}" -- "${completing_word}"; \
                  [ -n "${current_action_compgen}" ] \
                  && "${current_action_compgen}" "${completing_word}") )
  fi

  return 0
}

complete -o filenames -F _shtab_walbot_py ./walbot.py
