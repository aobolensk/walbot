import os
from collections import defaultdict
from typing import Any, Dict

from src.api.command import BaseCmd, SupportedPlatforms


class Executor:
    def __init__(self) -> None:
        self.commands = {}

    def add_module(self, module: BaseCmd) -> None:
        module.bind()

    def load_persistent_state(self, commands_data: Dict[str, Any]):
        for command in self.commands.values():
            command.load_persistent_state(commands_data)

    def store_persistent_state(self, commands_data: Dict[str, Any]):
        for command in self.commands.values():
            command.store_persistent_state(commands_data)

    def export_help(self, platform: SupportedPlatforms):
        modules = defaultdict(dict)
        for cmd_name, command in self.commands.items():
            if command.supported_platforms & platform:
                modules[command.module_name][cmd_name] = command.description.strip()
        with open(os.path.join("docs", f"{platform.name.title()}Commands.md"), "w") as f:
            f.write("""<!-- WARNING! This file is automatically generated, do not change it manually -->
<!-- To regenerate this file launch `python walbot.py docs` command or simply launch the bot -->
\n""")
            f.write("# Table of Contents:\n")
            for module_name in modules.keys():
                f.write(f"* [Module: {module_name}](#module-{module_name})\n")
            for module_name, module_commands in modules.items():
                f.write(f"\n# Module: {module_name}\n")
                result = ""
                for cmd_name, cmd_help_text in module_commands.items():
                    cmd_help_text = cmd_help_text.replace("<", "&lt;").replace(">", "&gt;").replace("\n", " \\\n")
                    result += f"\n**{cmd_name}**: {cmd_help_text}"
                    if self.commands[cmd_name].subcommand:
                        result += " \\\n    *This command can be used as subcommand*"
                    result += f" \\\n    *Default permission level: {self.commands[cmd_name].permission_level}*"
                    result += "\n"
                f.write(result)
